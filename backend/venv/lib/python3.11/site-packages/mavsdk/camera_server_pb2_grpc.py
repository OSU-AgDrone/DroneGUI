# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import camera_server_pb2 as camera__server_dot_camera__server__pb2


class CameraServerServiceStub(object):
    """Provides handling of camera trigger commands.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetInformation = channel.unary_unary(
                '/mavsdk.rpc.camera_server.CameraServerService/SetInformation',
                request_serializer=camera__server_dot_camera__server__pb2.SetInformationRequest.SerializeToString,
                response_deserializer=camera__server_dot_camera__server__pb2.SetInformationResponse.FromString,
                )
        self.SetInProgress = channel.unary_unary(
                '/mavsdk.rpc.camera_server.CameraServerService/SetInProgress',
                request_serializer=camera__server_dot_camera__server__pb2.SetInProgressRequest.SerializeToString,
                response_deserializer=camera__server_dot_camera__server__pb2.SetInProgressResponse.FromString,
                )
        self.SubscribeTakePhoto = channel.unary_stream(
                '/mavsdk.rpc.camera_server.CameraServerService/SubscribeTakePhoto',
                request_serializer=camera__server_dot_camera__server__pb2.SubscribeTakePhotoRequest.SerializeToString,
                response_deserializer=camera__server_dot_camera__server__pb2.TakePhotoResponse.FromString,
                )
        self.RespondTakePhoto = channel.unary_unary(
                '/mavsdk.rpc.camera_server.CameraServerService/RespondTakePhoto',
                request_serializer=camera__server_dot_camera__server__pb2.RespondTakePhotoRequest.SerializeToString,
                response_deserializer=camera__server_dot_camera__server__pb2.RespondTakePhotoResponse.FromString,
                )


class CameraServerServiceServicer(object):
    """Provides handling of camera trigger commands.
    """

    def SetInformation(self, request, context):
        """Sets the camera information. This must be called as soon as the camera server is created.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetInProgress(self, request, context):
        """Sets image capture in progress status flags. This should be set to true when the camera is busy taking a photo and false when it is done.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeTakePhoto(self, request, context):
        """Subscribe to image capture requests. Each request received should respond to using RespondTakePhoto.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RespondTakePhoto(self, request, context):
        """Respond to an image capture request from SubscribeTakePhoto.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CameraServerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetInformation': grpc.unary_unary_rpc_method_handler(
                    servicer.SetInformation,
                    request_deserializer=camera__server_dot_camera__server__pb2.SetInformationRequest.FromString,
                    response_serializer=camera__server_dot_camera__server__pb2.SetInformationResponse.SerializeToString,
            ),
            'SetInProgress': grpc.unary_unary_rpc_method_handler(
                    servicer.SetInProgress,
                    request_deserializer=camera__server_dot_camera__server__pb2.SetInProgressRequest.FromString,
                    response_serializer=camera__server_dot_camera__server__pb2.SetInProgressResponse.SerializeToString,
            ),
            'SubscribeTakePhoto': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeTakePhoto,
                    request_deserializer=camera__server_dot_camera__server__pb2.SubscribeTakePhotoRequest.FromString,
                    response_serializer=camera__server_dot_camera__server__pb2.TakePhotoResponse.SerializeToString,
            ),
            'RespondTakePhoto': grpc.unary_unary_rpc_method_handler(
                    servicer.RespondTakePhoto,
                    request_deserializer=camera__server_dot_camera__server__pb2.RespondTakePhotoRequest.FromString,
                    response_serializer=camera__server_dot_camera__server__pb2.RespondTakePhotoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mavsdk.rpc.camera_server.CameraServerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CameraServerService(object):
    """Provides handling of camera trigger commands.
    """

    @staticmethod
    def SetInformation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mavsdk.rpc.camera_server.CameraServerService/SetInformation',
            camera__server_dot_camera__server__pb2.SetInformationRequest.SerializeToString,
            camera__server_dot_camera__server__pb2.SetInformationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetInProgress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mavsdk.rpc.camera_server.CameraServerService/SetInProgress',
            camera__server_dot_camera__server__pb2.SetInProgressRequest.SerializeToString,
            camera__server_dot_camera__server__pb2.SetInProgressResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeTakePhoto(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mavsdk.rpc.camera_server.CameraServerService/SubscribeTakePhoto',
            camera__server_dot_camera__server__pb2.SubscribeTakePhotoRequest.SerializeToString,
            camera__server_dot_camera__server__pb2.TakePhotoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RespondTakePhoto(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mavsdk.rpc.camera_server.CameraServerService/RespondTakePhoto',
            camera__server_dot_camera__server__pb2.RespondTakePhotoRequest.SerializeToString,
            camera__server_dot_camera__server__pb2.RespondTakePhotoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
